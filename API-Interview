| **#**                                                           | **Vulnerability**                                                                                         | **Explanation** |
| --------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------- |
| **API1:2023 - Broken Object Level Authorization (BOLA)**        | Attackers can access or modify data they shouldn't by manipulating object IDs (e.g., user ID in request). |                 |
| **API2:2023 - Broken Authentication**                           | Weak login, session management, or token security allows attackers to impersonate users.                  |                 |
| **API3:2023 - Broken Object Property Level Authorization**      | APIs expose sensitive fields due to improper field-level access control.                                  |                 |
| **API4:2023 - Unrestricted Resource Consumption**               | APIs allow abuse of system resources like CPU, memory, storage, leading to DoS.                           |                 |
| **API5:2023 - Broken Function Level Authorization**             | Users can access high-privilege endpoints due to missing role checks.                                     |                 |
| **API6:2023 - Unrestricted Access to Sensitive Business Flows** | APIs expose critical business operations (e.g., checkout, payment) without rate limiting.                 |                 |
| **API7:2023 - Server Side Request Forgery (SSRF)**              | APIs fetch URLs without validation, allowing internal or sensitive data access.                           |                 |
| **API8:2023 - Security Misconfiguration**                       | APIs expose sensitive info via headers, verbose error messages, or debug mode.                            |                 |
| **API9:2023 - Improper Inventory Management**                   | Shadow APIs or old versions are left exposed without proper control or documentation.                     |                 |
| **API10:2023 - Unsafe Consumption of APIs**                     | APIs trust third-party or client data without validation, leading to injection or logic issues.           |                 |


üõ†Ô∏è Types of API Vulnerabilities
IDOR (Insecure Direct Object Reference)

Token leakage / Weak JWT handling

Mass assignment

Rate Limiting Bypass

Improper OAuth / OpenID usage

SSRF (Server-Side Request Forgery)

Insecure CORS Configuration

Overly permissive API responses

Improper logging or sensitive data exposure

GraphQL-specific issues (e.g., introspection, batching abuse)

üõ°Ô∏è Mitigation Techniques
Vulnerability	Mitigation
BOLA	Enforce object-level authorization for every request using ownership checks.
Broken Auth	Implement strong authentication, MFA, use secure tokens, short session timeouts.
Property Level Authorization	Avoid relying on the client; enforce field-level filtering on server.
Resource Consumption	Implement rate limiting, size quotas, pagination, circuit breakers.
Function Level Auth	Enforce RBAC/ABAC strictly for each endpoint. Never rely on client roles.
Sensitive Business Flows	Apply rate-limiting, CAPTCHA, and anomaly detection on business-critical APIs.
SSRF	Whitelist external URLs, validate user inputs, block internal IPs.
Misconfiguration	Harden configs, disable debug mode, hide stack traces, enforce secure headers.
Inventory Management	Maintain API documentation, deprecate old versions, block unknown endpoints.
Unsafe Consumption	Sanitize and validate all input/output from third-party APIs. Use schema validation.

üí¨ Advanced Interview Questions & Answers
1. Q: What is BOLA and how would you detect it in an API?
A: BOLA occurs when users can access others' data by changing an object ID (like user_id=123). It can be detected by fuzzing IDs and monitoring if unauthorized data is returned. Burp Suite intruder or tools like Autorize can help test this.

2. Q: How can SSRF be triggered via APIs? How do you prevent it?
A: SSRF can be triggered when an API fetches URLs (e.g., PDF generation, metadata URL fetch). Attackers can supply internal IPs (e.g., http://169.254.169.254). Prevent with URL allow-lists, IP range validation, and no redirection support.

3. Q: What is the difference between Broken Object vs Function Level Authorization?
A:

Object-level controls if a user can access specific resources (e.g., their own profile).

Function-level controls which operations or actions a user is allowed to do (e.g., admin delete rights).

4. Q: How do you secure APIs with rate-limiting and why is it important?
A: Use tools like API Gateway, WAF, or NGINX to enforce rate limits. It prevents abuse like brute-force, scraping, or resource exhaustion attacks. Protects against DoS and logic abuse.

5. Q: How would you test for mass assignment vulnerability in APIs?
A: Try sending unexpected fields (e.g., is_admin=true) in the API body. If accepted without validation, the app may be vulnerable. Use tools like Burp Repeater or custom scripts.

6. Q: How do you secure token-based authentication (JWT) in APIs?
A:

Use HS256/RS256 algorithms securely.

Avoid none algorithm.

Use short expiry, rotate tokens, secure storage (e.g., HTTP-only cookies or secure headers).

Implement proper token revocation and signature validation.

7. Q: What is GraphQL abuse and how do you test it?
A: GraphQL introspection may reveal all schema. Attackers can abuse queries like batching, deep recursion, or nested queries. Use GraphQL-specific fuzzers, disable introspection in prod.

üß™ Examples of API Vulnerabilities
üîπ BOLA Example
http
Copy
Edit
GET /api/user/102/profile
Authorization: Bearer valid-token

# If attacker can access another user‚Äôs data, it's BOLA.
üîπ Mass Assignment Example
json
Copy
Edit
POST /api/users
{
  "username": "user",
  "password": "pass",
  "is_admin": true  // shouldn't be allowed
}
üîπ SSRF in URL Fetching API
json
Copy
Edit
POST /api/preview
{
  "url": "http://169.254.169.254/latest/meta-data"
}
üîπ Broken Auth Example
http
Copy
Edit
POST /api/login
{
  "username": "admin",
  "password": "admin123"
}

# If no brute-force protection, attackers can try credentials.
üß∞ Tools for API Testing
Burp Suite (with extensions like Autorize, JWT Editor, Param Miner)

Postman or Insomnia

OWASP ZAP (with API scanner)

Nmap (for open ports & services on API servers)

GraphQL Voyager / InQL (for GraphQL enumeration)
