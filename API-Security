# üîê API Security Checklist

![Security](https://img.shields.io/badge/security-api-blue)
![OWASP Top 10](https://img.shields.io/badge/OWASP-Top%2010-important)
![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen)
![License: MIT](https://img.shields.io/badge/license-MIT-lightgrey)

> A comprehensive guide to identifying and mitigating common API security vulnerabilities ‚Äî complete with test cases, impact, and best practices.

---

<details>
<summary><strong>üìã Vulnerability Matrix (Click to Expand)</strong></summary>

| #Ô∏è‚É£ | Vulnerability | Test Cases | Impact | Mitigation |
|---|----------------|------------|--------|------------|
| 1Ô∏è‚É£ | **Broken Authentication** | - Brute-force login endpoints<br>- Use invalid/expired tokens<br>- Replay old tokens | - Account takeover<br>- Unauthorized access | - Implement MFA<br>- Apply rate limiting<br>- Token expiration |
| 2Ô∏è‚É£ | **Broken Object Level Authorization (BOLA)** | - Modify object ID in API request (e.g., `/user/123` ‚Üí `/user/124`) | - Access to other users' data | - Enforce object-level access control<br>- Use UUIDs for object references |
| 3Ô∏è‚É£ | **Excessive Data Exposure** | - Observe API responses for extra/unintended fields<br>- Use tools like Burp Suite / OWASP ZAP | - Sensitive data leakage | - Filter response data at the server<br>- Avoid exposing internal fields |
| 4Ô∏è‚É£ | **Lack of Rate Limiting** | - Send a large number of requests (DoS or brute-force style) | - Service outage<br>- Credential brute force | - Apply rate limiting per IP or token<br>- Monitor and alert on abnormal activity |
| 5Ô∏è‚É£ | **Mass Assignment** | - Add unexpected parameters to requests (e.g., `isAdmin=true`) | - Unauthorized access<br>- Privilege escalation | - Use allow-lists for request parameters<br>- Validate input schema |
| 6Ô∏è‚É£ | **Injection (SQL, NoSQL, Command)** | - Input payloads like `' OR '1'='1`<br>- Use tools: sqlmap, NoSQLMap | - Data breach<br>- Command execution | - Use parameterized queries<br>- Input validation/sanitization |
| 7Ô∏è‚É£ | **Improper Assets Management** | - Access hidden endpoints (`/dev`, `/v1`, `/beta`, etc.)<br>- Identify deprecated APIs | - Access to test/unmaintained endpoints | - Maintain updated API inventory<br>- Remove or restrict unused endpoints |
| 8Ô∏è‚É£ | **Security Misconfiguration** | - Use default credentials<br>- Access verbose error messages<br>- Try endpoints like `/admin` or `/debug` | - System compromise | - Disable debug mode<br>- Use secure HTTP headers<br>- Harden configurations |
| 9Ô∏è‚É£ | **Insecure Data Storage/Transmission** | - Inspect HTTP traffic for plaintext data<br>- Look for hardcoded secrets in APIs | - Credential exposure<br>- Sensitive data leakage | - Enforce HTTPS<br>- Encrypt data at rest and in transit |
| üîü | **Insufficient Logging & Monitoring** | - Perform simulated attacks and check logging coverage<br>- Test alerting mechanisms | - Breaches go undetected | - Implement centralized logging<br>- Configure real-time alerts and dashboards |

</details>

---

## ‚úÖ Use Cases

This checklist is ideal for:

- üõ°Ô∏è Security Analysts performing API assessments  
- üß™ QA Engineers writing security test cases  
- üë®‚Äçüíª Developers building secure REST APIs  
- üìù Auditors checking compliance with security standards  

---

## üìö References

- üîó [OWASP API Security Top 10](https://owasp.org/www-project-api-security/)
- üîó [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)
- üîó [PortSwigger API Security Guide](https://portswigger.net/web-security/api)

---

## üôå Contributing

Want to improve this checklist? Found a vulnerability not listed here?

> üí° [Open an issue](https://github.com/your-repo/issues) or [submit a pull request](https://github.com/your-repo/pulls) ‚Äî all contributions are welcome!

---

## üìÑ License

This project is licensed under the MIT License ‚Äî see the [LICENSE](LICENSE) file for details.
