| **#** | **Vulnerability**                            | **Test Cases**                                                                       | **Impact**                                      | **Mitigation**                                                          |
| ----- | -------------------------------------------- | ------------------------------------------------------------------------------------ | ----------------------------------------------- | ----------------------------------------------------------------------- |
| 1Ô∏è‚É£   | **Broken Authentication**                    | - Brute force login endpoints<br>- Use invalid/expired tokens<br>- Replay old tokens | - Account takeover<br>- Unauthorized access     | - Implement MFA<br>- Rate limiting<br>- Token expiration                |
| 2Ô∏è‚É£   | **Broken Object Level Authorization (BOLA)** | - Modify object ID in API request (e.g., `/user/123` ‚Üí `/user/124`)                  | - Access to other users' data                   | - Enforce access checks on object IDs<br>- Use UUIDs                    |
| 3Ô∏è‚É£   | **Excessive Data Exposure**                  | - Observe API responses for extra fields<br>- Use tools like Burp/OWASP ZAP          | - Leakage of sensitive data                     | - Filter response data at the server<br>- Avoid sending internal fields |
| 4Ô∏è‚É£   | **Lack of Rate Limiting**                    | - Send a high number of requests (brute force, DoS)                                  | - Account lockout<br>- System overload          | - Apply rate limiting per IP/token<br>- Monitor logs                    |
| 5Ô∏è‚É£   | **Mass Assignment**                          | - Add unexpected parameters (e.g., `isAdmin=true`)                                   | - Unauthorized access<br>- Privilege escalation | - Whitelist properties<br>- Validate input schema                       |
| 6Ô∏è‚É£   | **Injection (SQL, NoSQL, Command)**          | - Input payloads like `' OR '1'='1`<br>- Use tools: sqlmap, NoSQLMap                 | - Data theft<br>- System compromise             | - Use parameterized queries<br>- Input sanitization                     |
| 7Ô∏è‚É£   | **Improper Assets Management**               | - Access `/v1`, `/v2`, `/dev`, `/beta` endpoints<br>- Check for outdated APIs        | - Access to unpatched or test APIs              | - Maintain updated inventory<br>- Remove unused endpoints               |
| 8Ô∏è‚É£   | **Security Misconfiguration**                | - Test with default creds, verbose errors<br>- Access `/admin`, `/debug` endpoints   | - Full system compromise                        | - Harden server<br>- Use secure headers<br>- Disable debug mode         |
| 9Ô∏è‚É£   | **Insecure Data Storage/Transmission**       | - Observe for HTTP endpoints<br>- Inspect for hardcoded secrets                      | - Data theft in transit<br>- Credential leakage | - Use HTTPS<br>- Encrypt sensitive data at rest                         |
| üîü    | **Insufficient Logging & Monitoring**        | - Perform an attack and check logs<br>- Attempt privilege escalation                 | - Breach goes undetected                        | - Centralize logging<br>- Set up alerts                                 |
